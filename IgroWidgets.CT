<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="24">
  <CheatEntries>
    <CheatEntry>
      <ID>1337</ID>
      <Description>"Initialize"</Description>
      <Options moHideChildren="1"/>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
--[[START Igromanru's widgets class]]--
-- Class for my UDF's
IgroWidgets = {}

function IgroWidgets:new()
  setmetatable({}, self)
  self.__index = self
  self.addressList = getAddressList()
  return self
end

function IgroWidgets:stringTrim(s)
  return s:gsub("^%s*(.-)%s*$", "%1")
end

function IgroWidgets:isNotEmpty(s)
  return s ~= nil and self:stringTrim(s) ~= ''
end

function IgroWidgets:isEmpty(s)
  return s == nil or self:stringTrim(s) == ''
end

function IgroWidgets:toHex(number)
  return string.format("%X",number)
end

function IgroWidgets:toHexLegth(number, length)
  if length == nil then length = 1 end
  length = length * 2
  return string.format("%0"..length.."X",number)
end

function IgroWidgets:floatToHex(number, length)
  local result = ""
  local byteTable = floatToByteTable(number)

  if length == nil then length = 1 end
  if(length &gt; #byteTable) then
    for i = 1, length-#byteTable do
      result = "00"..result
    end
  end
  for i, v in ipairs(byteTable) do
    result = string.format('%02X', v) .. result
  end
  return result
end

function IgroWidgets:floatToDecimal(number, length)
  return tonumber(self:floatToHex(number,length),16)
end

function IgroWidgets:floatToByteArray(number)
  local result = ""
  local byteTable = floatToByteTable(number)

  for i, v in ipairs(byteTable) do
    if(self:isNotEmpty(result)) then
      result = result .. " "
    end
    result = result .. string.format('%02X', v)
  end

  return result
end

function IgroWidgets:floatToByteArray(number)
  local result = ""
  local byteTable = floatToByteTable(number)

  for i, v in ipairs(byteTable) do
    if(self:isNotEmpty(result)) then
      result = result .. " "
    end
    result = result .. string.format('%02X', v)
  end

  return result
end

function IgroWidgets:decToHex(number, length)
  return self:toHexLegth(number,length)
end

function IgroWidgets:decToByteArray(number, length)
  return self:hexToByteArray(self:toHexLegth(number,length))
end

function IgroWidgets:hexToDecimal(hexString)
  return tonumber(hexString,16)
end

function IgroWidgets:hexToFloat(hexString)
  local byteTable = {}
  for hexChar in string.gmatch(hexString,"(%x%x)") do
    table.insert(byteTable,1,tonumber(hexChar,16))
  end
  return tonumber(string.format("%.2f", byteTableToFloat(byteTable)))
end

function IgroWidgets:hexToByteArray(hex)
  local result = ""
  local index = string.len(hex)-1
  local tmp = ""
  while index ~= nil and index &gt;= 0 do
    tmp = string.sub(hex, index, index+1)
    if igro:isNotEmpty(tmp) then
      if igro:isNotEmpty(result) then
        result = result .. " "
      end
      result = result .. tmp
    else
      break
    end
    index = index - 2
    sleep(1)
  end
  result = string.gsub(result, "%s$", "")
  return result
end

function IgroWidgets:byteArrayToHex(byteArray)
  local result = ""
  local index = 1
  local tmp = ""
  byteArray = string.gsub(byteArray, "%s", "")
  index = string.len(byteArray)-1
  while index ~= nil and index &gt;= 0 do
    tmp = string.sub(byteArray, index, index+1)
    if igro:isNotEmpty(tmp) then
      result = result .. tmp
    else
      break
    end
    index = index - 2
    sleep(1)
  end
  result = string.gsub(result, "%s$", "")
  return result
end

function IgroWidgets:byteArrayToDecimal(byteArray)
  return tonumber(self:byteArrayToHex(byteArray),16)
end

function IgroWidgets:byteArrayToFloat(byteArray)
  return self:hexToFloat(self:byteArrayToHex(byteArray))
end

function IgroWidgets:getRecordById(id)
  return self.addressList.getMemoryRecordByID(id)
end

function IgroWidgets:getRecordByDescription(description)
  return self.addressList.getMemoryRecordByDescription(description)
end

function IgroWidgets:getRecord(index)
  return self.addressList.getMemoryRecord(index)
end

-- Creating an instance of IgroWidgets
igro = IgroWidgets:new()
--[[END Igromanru's widgets class]]--

TestName = ""
-- Tests Part
function message(msg)
  showMessage(TestName.." Error: "..msg)
end


[DISABLE]

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>16</ID>
          <Description>"stringTrim Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "stringTrim"

if(igro:stringTrim(" ") ~=  "") then
  message("' ' should be ''")
elseif(igro:stringTrim(" 123 ") ~= "123") then
  message("' 123 ' should '123'")
end

 
[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"isNotEmpty Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "isNotEmpty"

if(igro:isNotEmpty(" ")) then
  message("' ' should be empty")
elseif(not igro:isNotEmpty("123")) then
  message("'123' should not be empty")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"isEmpty Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "isEmpty"

if(not igro:isEmpty(" ")) then
  message("' ' should be empty")
elseif(igro:isEmpty("123")) then
  message("'123' should not be empty")
end
 
[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1338</ID>
          <Description>"toHex Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "toHexLegth"

if(igro:toHex(22) ~= "16") then
  message("22d should be '16'h")
elseif(igro:toHex(22312) ~= "5728") then
  message("22312d should be '5728'h")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"toHexLegth Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "toHexLegth"

if(igro:toHexLegth(22) ~= "16") then
  message("22 should be '16'")
elseif(igro:toHexLegth(12,4) ~= "0000000C") then
  message("12 with legth 4 should be 0000000C")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"floatToHex Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "floatToHex"

if(igro:floatToHex(9.99) == "411fd70a") then
  message("9.99 should be 411fd70a")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"floatToDecimal Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "floatToDecimal"

if(igro:floatToDecimal(9.99) ~= 1092605706 ) then
  message("9.99 should be 1092605706")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"floatToByteArray Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "floatToByteArray"

if(igro:floatToByteArray(9.99) ~= "0A D7 1F 41") then
  message("9.99 should be '0A D7 1F 41'")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>18</ID>
          <Description>"decToHex Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "decToHex"

if(igro:decToHex(9) ~= "09") then
  message("9 should be '09'")
elseif(igro:decToHex(9,4) ~= "00000009") then
  message("9 should be '00000009'")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"decToByteArray Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "decToByteArray"

if(igro:decToByteArray(9) ~= "09") then
  message("9 should be '09'")
elseif(igro:decToByteArray(9,4) ~= "09 00 00 00") then
  message("9 should be '09 00 00 00'")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"hexToDecimal Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "hexToDecimal"

if(igro:hexToDecimal("4D8") ~= 1240) then
  message("'4D8' should be 1240")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>"hexToFloat Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "hexToFloat"

if(igro:hexToFloat("40900000") ~= 4.5) then
  message("'40900000' should be 4.5")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>11</ID>
          <Description>"hexToByteArray Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "hexToByteArray"

if(igro:hexToByteArray("40900000") ~= "00 00 90 40") then
  message("'40900000' should be '00 00 90 40'")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>12</ID>
          <Description>"byteArrayToHex Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "byteArrayToHex"

if(igro:byteArrayToHex("00 00 90 40") ~= "40900000") then
  message("'00 00 90 40' should be '40900000'")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>"byteArrayToDecimal Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "byteArrayToDecimal"

if(igro:byteArrayToDecimal("00 00 90 40") ~= 1083179008) then
  message("'00 00 90 40' should be 1083179008")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"byteArrayToFloat Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "byteArrayToDecimal"

if(igro:byteArrayToFloat("00 00 90 40") ~= 4.5) then
  message("'00 00 90 40' should be 4.5")
end

[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>15</ID>
          <Description>"getRecordById Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "getRecordById"

local record = igro:getRecordById(1337)
if(record == nil) then
  message("'Id 1337 wasn't found")
elseif(record.Description ~= "Initialize") then
  message("'Found wrong record with ID 1337")
end

 
[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1339</ID>
          <Description>"getRecordByDescription Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "getRecordByDescription"

local record = igro:getRecordByDescription("Initialize")
if(record == nil) then
  message("Description 'Initialize' wasn't found")
elseif(record.Id ~= 1337) then
  message("'Found wrong record with Description 'Initialize'")
end

 
[DISABLE]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1340</ID>
          <Description>"getRecord Test"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
{$lua}
TestName = "getRecord"

local record = igro:getRecord(0)
if(record == nil) then
  message("Record with index '0' wasn't found")
elseif(record.Id ~= 1337) then
  message("'Found wrong record with index '0'")
end

 
[DISABLE]
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Execute All Tests"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
{$lua}
if syntaxcheck then return end

local addresslist = getAddressList()
local record = addresslist.getMemoryRecordByDescription("Initialize")
record.Active = true
for i = 0, record.Count-1 do
  record.Child[i].Active = true
end

[DISABLE]
{$lua}
local addresslist = getAddressList()
local record = addresslist.getMemoryRecordByDescription("Initialize")
record.Active = false
for i = 0, record.Count-1 do
  record.Child[i].Active = false
end
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
